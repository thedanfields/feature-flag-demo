{
  "Description" : "east-us-1 stack for feature flag demo",
  "Parameters" : {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    }
  },
  "Resources" : {
    "ApiServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "python_install" : [ "provision_file_system", "install_python", "download_api_artifacts" , "bootstrap_api_app" ]
          },
          "provision_file_system" : {
            "commands" : {
              "01_setup_file_system" : {
                "command" : "mkdir -p -m777 provision source/api; ls",
                "cwd" : "/home/ec2-user"
              }
            }
          },
          "install_python" : {
            "commands" : {
              "01_install_python_3_8" : {
                "command" : "amazon-linux-extras install python3.8",
                "cwd" : "~"
              }
            }
          },
          "download_api_artifacts" : {
            "sources" : {
              "home/ec2-user/source/api" : "https://github.com/thedanfields/feature-flag-demo/tarball/main"
            }
          },
          "bootstrap_api_app": {
            "files" : {
              "/etc/systemd/system/api.service" : {
                "content" : { "Fn::Join" : ["", [
                  "[Unit] \n\n",
                  "Description=api_service \n",
                  "After=network.target \n\n",
                  "[Service] \n",
                  "WorkingDirectory=/home/ec2-user/source/api \n",
                  "ExecStart=/home/ec2-user/source/api/env/bin/pserve /home/ec2-user/source/api/production.ini \n\n",
                  "[Install] \n",
                  "WantedBy=multi-user.target"
                  ]]},
                "mode" :"000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_create_virtual_environment": {
                "command": "python3.8 -m venv env",
                "cwd": "/home/ec2-user/source/api"
              },
              "02_grant_permissions": {
                "command": "chmod 777 api -R",
                "cwd": "/home/ec2-user/source"
              },
              "03_install_dependencies" : {
                 "command" : { "Fn::Join" : ["", [
                                "source env/bin/activate ;",
                                "env/bin/pip install --upgrade pip setuptools ;",
                                "python setup.py develop"
                                ]]
                              },
                "cwd" : "/home/ec2-user/source/api"
              }
            }
          }
         }
      },
      "Properties" : {
        "ImageId" : "ami-0ed9277fb7eb570c9",
        "InstanceType" : "t2.micro",
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ {"Ref" : "ApiServerSecurityGroup"} ],
        "UserData" : { "Fn::Base64" :
          { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource ApiServer ",
             "         --configsets python_install ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource ApiServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },
    "ApiServerSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },
  "Outputs" : {
    "ApiServerUrl" : {
      "Description" : "Url for api server",
       "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ApiServer", "PublicDnsName" ]}]] }
    },
    "api-ssh-command" : {
      "Description" : "use me to ssh into the api server",
      "Value" : { "Fn::Join" :  ["", ["ssh -i ", { "Ref" : "KeyName" }, ".pem", " ec2-user@", { "Fn::GetAtt" : [ "ApiServer", "PublicDnsName" ]}]]}
    }
  }
}